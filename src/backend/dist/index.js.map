{
  "version": 3,
  "sources": ["../index.ts"],
  "sourceRoot": "dist",
  "sourcesContent": ["import dbAPI from \"./database/dbapi\";\r\n\r\n/**\r\n *  Bindings:\r\n * - The D1 database name is 'resources-db'\r\n * - The R2 storage bucket name is 'resources_bucket'\r\n * This can be checked in the 'wrangler.json' file\r\n */ \r\n\r\n\r\n/**\r\n * Welcome to Cloudflare Workers! This is your first worker.\r\n *\r\n * - Run \"npm run dev\" in your terminal to start a development server\r\n * - Open a browser tab at http://localhost:8787/ to see your worker in action\r\n * - Run \"npm run deploy\" to publish your worker\r\n *\r\n * Learn more at https://developers.cloudflare.com/workers/\r\n */\r\n\r\n\r\nasync function handle_upload(request: any, env: any, ctx: any) {\r\n    return new Response(\"todo: add the upload functionality here\", { status: 501 });\r\n\r\n    // look for token/auth in request headers. early return 401 if not found\r\n\r\n    // parse the post body according to the schema\r\n\r\n    // sanitise and validate the data\r\n\r\n    // send data to database and then add to R2 bucket\r\n\r\n    // return success or error response\r\n\r\n}\r\n\r\nasync function search(request: any, env: any, ctx: any) {\r\n    return new Response(\"We are searching\", { status: 200 });\r\n\r\n    // TODO: add sql query to search for resources:\r\n\r\n\r\n    // parse the query string (this is a GET request) for what to search for\r\n\r\n    // validate and return early if invalid\r\n\r\n    // do the corresponding sql stuff and get the results\r\n\r\n    // return the results in a lovely json format and success of 200 :))\r\n\r\n}\r\n\r\n\r\nexport default {\r\n    async fetch(request: any, env: any, ctx: any) {\r\n        // // Create an API instance\r\n        // const db = new dbAPI(env);\r\n                \r\n        // // Initialise the database if it hasnt been already\r\n        // db.initialiseDatabase();\r\n\r\n        // Parse the endpoint\r\n        const url = new URL(request.url);\r\n        const pathname = url.pathname;\r\n\r\n        // Check the endpoint\r\n        if (pathname.startsWith('/search')) {\r\n            return search(request, env, ctx);\r\n        } else if (pathname.startsWith(\"/upload\")) {\r\n            return handle_upload(request, env, ctx);\r\n        }\r\n\r\n        return new Response(\"Not Found\", { status: 404 });\r\n\r\n        /** D1 Integration Info\r\n         * \r\n         * D1 database is 'env.DB', where \"DB\" is the binding name from the `wrangler.toml / wrangler.json` file. (in this case, `resources_db`)\r\n         * const someVariable = `Bs Beverages`;\r\n         * const stmt = env.DB.prepare(\"SELECT * FROM Customers WHERE CompanyName = ?\").bind(someVariable);\r\n         * \r\n         * \r\n         */\r\n\r\n    },\r\n};\r\n\r\n// end \r\n"],
  "mappings": ";;;;AAqBA,eAAe,cAAc,SAAc,KAAU,KAAU;AAC3D,SAAO,IAAI,SAAS,2CAA2C,EAAE,QAAQ,IAAI,CAAC;AAYlF;AAbe;AAef,eAAe,OAAO,SAAc,KAAU,KAAU;AACpD,SAAO,IAAI,SAAS,oBAAoB,EAAE,QAAQ,IAAI,CAAC;AAa3D;AAde;AAiBf,IAAO,kBAAQ;AAAA,EACX,MAAM,MAAM,SAAc,KAAU,KAAU;AAQ1C,UAAM,MAAM,IAAI,IAAI,QAAQ,GAAG;AAC/B,UAAM,WAAW,IAAI;AAGrB,QAAI,SAAS,WAAW,SAAS,GAAG;AAChC,aAAO,OAAO,SAAS,KAAK,GAAG;AAAA,IACnC,WAAW,SAAS,WAAW,SAAS,GAAG;AACvC,aAAO,cAAc,SAAS,KAAK,GAAG;AAAA,IAC1C;AAEA,WAAO,IAAI,SAAS,aAAa,EAAE,QAAQ,IAAI,CAAC;AAAA,EAWpD;AACJ;",
  "names": []
}
